"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 4.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-uw3$)963+!i^!b6(y9o6(^s%c&u-69usy#hm4l+2yhgf2(1#-$"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("SECURITY_DEBUG", "0") == "1"

ALLOWED_HOSTS = os.environ.get("SECURITY_ALLOWED_HOSTS", "localhost").split(",")
CSRF_TRUSTED_ORIGINS = os.environ.get(
    "SECURITY_CSRF_TRUSTED_ORIGINS", "https://r2f2.com"
).split(",")

# Application definition

INSTALLED_APPS = [
    "app1",
    "bootstrap4",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "project.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "project.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ.get("DB_NAME", "django"),
        "USER": os.environ.get("DB_USER", "root"),
        "PASSWORD": os.environ.get("DB_PASSWORD", "1234"),
        "HOST": os.environ.get("DB_HOST", "localhost"),
        "PORT": os.environ.get("DB_PORT", "5432"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = os.environ.get("TZ", "UTC")

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = os.path.join(BASE_DIR, "static")

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

LOGIN_URL = "login"

# mail settings
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = os.environ.get("EMAIL_HOST", "mail.r2f2.com")
EMAIL_PORT = int(os.environ.get("EMAIL_PORT", "587"))
EMAIL_USE_TLS = os.environ.get("EMAIL_USE_TLS", "1") == "1"
EMAIL_HOST_USER = os.environ.get("EMAIL_USER", "noreply@r2f2.com")
EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_PASSWORD", "1234")

# generate https schme in emails verification links
# @property
# def scheme(self):
#     return 'https' if self.is_secure() else 'http'

# def is_secure(self):
#     if settings.SECURE_PROXY_SSL_HEADER:
#         header, expected_value = settings.SECURE_PROXY_SSL_HEADER
#         return self.META.get(header) == expected_value
#     return self._get_scheme() == 'https'
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

# Turnstile settings
TURNSTILE_VERIFY_URL = "https://challenges.cloudflare.com/turnstile/v0/siteverify"
TURNSTILE_SIGN_UP_SITE_KEY = os.environ.get("TURNSTILE_SIGN_UP_SITE_KEY", "KEY1")
TURNSTILE_SIGN_UP_SECRET_KEY = os.environ.get("TURNSTILE_SIGN_UP_SECRET_KEY", "KEY2")

# Logging configuration
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "[{asctime}] {levelname} {name} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname}: {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
        "file": {
            "class": "logging.FileHandler",
            "filename": "django.log",
            "formatter": "verbose",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": True,
        },
        "app1": {
            "handlers": ["console"],
            "level": "DEBUG",
            "propagate": False,
        },
    },
}

# game api
GAME_API_URL = os.environ.get("GAME_API_URL", "http://r2f2.com:8080/api/accounts")
GAME_WEBSOCKET_URL = os.environ.get("GAME_WEBSOCKET_URL", "wss://r2f2.com/api/game")
GAME_CONFIG_PATH = os.environ.get("GAME_CONFIG_PATH", "/etc/server-game-common")
GAME_CONFIG_PATH = f"{GAME_CONFIG_PATH}/IGCData"

# load all files
import sys
import xml.etree.ElementTree as ET
import re

GAME_MAP_NAMES = []
GAME_SKILLS = {}
GAME_ITEMS = {}
GAME_ITEM_SWORD_INDEXS = []
GAME_ITEM_CLAW_INDEXS = []
GAME_ITEM_AXE_INDEXS = []
GAME_ITEM_MACE_INDEXS = []
GAME_ITEM_SCEPTER_INDEXS = []
GAME_ITEM_SPEAR_INDEXS = []
GAME_ITEM_BOW_INDEXS = []
GAME_ITEM_CROSSBOW_INDEXS = []
GAME_ITEM_STAFF_INDEXS = []
GAME_ITEM_STICK_INDEXS = []
GAME_ITEM_BOOK_INDEXS = []
GAME_ITEM_SHIELD_INDEXS = []
GAME_ITEM_HELMET_INDEXS = []
GAME_ITEM_ARMOR_INDEXS = []
GAME_ITEM_PANTS_INDEXS = []
GAME_ITEM_GLOVES_INDEXS = []
GAME_ITEM_BOOTS_INDEXS = []
GAME_ITEM_WING_INDEXS = []
GAME_ITEM_SET_INDEXS = []
GAME_ITEM_WEAPON_KEYWORDS = [
    "sword",
    "claw",
    "axe",
    "mace",
    "scepter",
    "spear",
    "bow",
    "crossbow",
    "staff",
    "stick",
    "book",
    "shield",
]
GAME_ITEM_ARMOR_KEYWORDS = [
    "helmet",
    "armor",
    "pants",
    "gloves",
    "boots",
]
GAME_ITEM_WING_KEYWORDS = ["wing"]
GAME_ITEM_SET_KEYWORDS = ["set"]
GAME_ITEM_STAFF_LIKE_KEYWORDS = [
    "staff",
    "stick",
    "book",
]
GAME_ITEM_SHIELD_LIKE_KEYWORDS = [
    "shield",
]
GAME_ITEMS_KEYWORDS = [
    GAME_ITEM_WEAPON_KEYWORDS,
    GAME_ITEM_ARMOR_KEYWORDS,
    GAME_ITEM_WING_KEYWORDS,
    GAME_ITEM_SET_KEYWORDS,
]
GAME_ITEM_KINDS = {
    "sword": GAME_ITEM_SWORD_INDEXS,
    "claw": GAME_ITEM_CLAW_INDEXS,
    "axe": GAME_ITEM_AXE_INDEXS,
    "mace": GAME_ITEM_MACE_INDEXS,
    "scepter": GAME_ITEM_SCEPTER_INDEXS,
    "spear": GAME_ITEM_SPEAR_INDEXS,
    "bow": GAME_ITEM_BOW_INDEXS,
    "crossbow": GAME_ITEM_CROSSBOW_INDEXS,
    "staff": GAME_ITEM_STAFF_INDEXS,
    "stick": GAME_ITEM_STICK_INDEXS,
    "book": GAME_ITEM_BOOK_INDEXS,
    "shield": GAME_ITEM_SHIELD_INDEXS,
    "helmet": GAME_ITEM_HELMET_INDEXS,
    "armor": GAME_ITEM_ARMOR_INDEXS,
    "pants": GAME_ITEM_PANTS_INDEXS,
    "gloves": GAME_ITEM_GLOVES_INDEXS,
    "boots": GAME_ITEM_BOOTS_INDEXS,
    "wing": GAME_ITEM_WING_INDEXS,
    "set": GAME_ITEM_SET_INDEXS,
}


# load map
def load_map():
    game_map_name_count = {}
    et = ET.parse(f"{GAME_CONFIG_PATH}/IGC_MapList.xml")
    root = et.getroot()
    for emap in root.find("DefaultMaps"):
        file = emap.get("File", "00_Lorencia.att")
        match = re.match(r"\d+_(.+)\.att$", file)
        name = match.group(1) if match else file.replace(".att", "")
        if name == "Null":
            continue
        name_count = 0
        if name in game_map_name_count:
            name_count = game_map_name_count[name]
        new_name = name
        if name_count >= 1:
            new_name = f"{name}{name_count+1}"
        game_map_name_count[name] = name_count + 1
        GAME_MAP_NAMES.append(new_name)


# load skill
def load_skill():
    et = ET.parse(f"{GAME_CONFIG_PATH}/Skills/IGC_SkillList.xml")
    root = et.getroot()
    for eskill in root.findall("Skill"):
        skill_index = int(eskill.get("Index"))
        skill_name = eskill.get("Name")
        skill_annotation = eskill.get("anotation")
        skill_name = f"{skill_name} {skill_annotation}"
        skill = {
            "index": skill_index,
            "name": skill_name,
        }
        GAME_SKILLS[skill_index] = skill


# load item
def load_item():
    et = ET.parse(f"{GAME_CONFIG_PATH}/Items/IGC_ItemList.xml")
    root = et.getroot()
    for esection in root.findall("Section"):
        section_index = int(esection.get("Index"))
        for eitem in esection.findall("Item"):
            item_index = int(eitem.get("Index"))
            item_name = eitem.get("Name")
            item_annotation = eitem.get("annotation")
            if item_name == "" or item_annotation == "":
                continue
            item_name = f"{item_name} {item_annotation}"
            item_skill_index = int(eitem.get("SkillIndex"))
            item_skill_name = ""
            skill = GAME_SKILLS.get(item_skill_index)
            if skill is not None:
                item_skill_name = skill["name"]
            else:
                item_skill_name = "-"
            item_two_hand = eitem.get("TwoHand") == "1"
            item_excellent = eitem.get("Option") == "1"
            item_damage_min = int(eitem.get("DamageMin", 0))
            item_damage_max = int(eitem.get("DamageMax", 0))
            item_attack_speed = int(eitem.get("AttackSpeed", 0))
            item_move_speed = int(eitem.get("WalkSpeed", 0))
            item_defense = int(eitem.get("Defense", 0))
            item_defense_rate = int(eitem.get("SuccessfulBlocking", 0))
            item_magic_power = int(eitem.get("MagicPower", 0))
            item = {
                "section": section_index,
                "index": item_index,
                "name": item_name,
                "skill": item_skill_name,
                "two_hand": item_two_hand,
                "excellent": item_excellent,
                "damage_min": item_damage_min,
                "damage_max": item_damage_max,
                "attack_speed": item_attack_speed,
                "move_speed": item_move_speed,
                "defense": item_defense,
                "defense_rate": item_defense_rate,
                "magic_power": item_magic_power,
            }
            GAME_ITEMS[(section_index, item_index)] = item
            item_kind_a = int(eitem.get("KindA"))
            item_kind_b = int(eitem.get("KindB"))
            match item_kind_b:
                case 1 | 2:
                    GAME_ITEM_SWORD_INDEXS.append((section_index, item_index))
                case 3:
                    GAME_ITEM_CLAW_INDEXS.append((section_index, item_index))
                case 4:
                    GAME_ITEM_AXE_INDEXS.append((section_index, item_index))
                case 5:
                    GAME_ITEM_MACE_INDEXS.append((section_index, item_index))
                case 6:
                    GAME_ITEM_SCEPTER_INDEXS.append((section_index, item_index))
                case 7:
                    GAME_ITEM_SPEAR_INDEXS.append((section_index, item_index))
                case 8:
                    GAME_ITEM_BOW_INDEXS.append((section_index, item_index))
                case 9:
                    GAME_ITEM_CROSSBOW_INDEXS.append((section_index, item_index))
                case 12:
                    GAME_ITEM_STAFF_INDEXS.append((section_index, item_index))
                case 13:
                    GAME_ITEM_STICK_INDEXS.append((section_index, item_index))
                case 14:
                    GAME_ITEM_BOOK_INDEXS.append((section_index, item_index))
                case 15:
                    GAME_ITEM_SHIELD_INDEXS.append((section_index, item_index))
                case 16:
                    GAME_ITEM_HELMET_INDEXS.append((section_index, item_index))
                case 17:
                    GAME_ITEM_ARMOR_INDEXS.append((section_index, item_index))
                case 18:
                    GAME_ITEM_PANTS_INDEXS.append((section_index, item_index))
                case 19:
                    GAME_ITEM_GLOVES_INDEXS.append((section_index, item_index))
                case 20:
                    GAME_ITEM_BOOTS_INDEXS.append((section_index, item_index))
                case _ if item_kind_a == 6:
                    GAME_ITEM_WING_INDEXS.append((section_index, item_index))


# load set
def load_set():
    sets = [set() for _ in range(64)]
    et = ET.parse(f"{GAME_CONFIG_PATH}/Items/IGC_ItemSetType.xml")
    root = et.getroot()
    for eSection in root.findall("Section"):
        section_index = int(eSection.get("Index"))
        for eItem in eSection.findall("Item"):
            item_index = int(eItem.get("Index"))
            item_tier1 = int(eItem.get("TierI"))
            if item_tier1 != 0:
                sets[item_tier1].add((section_index, item_index))
            item_tier2 = int(eItem.get("TierII"))
            if item_tier2 != 0:
                sets[item_tier2].add((section_index, item_index))
    et = ET.parse(f"{GAME_CONFIG_PATH}/Items/IGC_ItemSetOption.xml")
    root = et.getroot()
    for eSet in root.findall("SetItem"):
        set_index = int(eSet.get("Index"))
        if set_index > 38:
            break
        set_name = eSet.get("Name")
        set_annotation = eSet.get("annotation")
        if set_name == "" or set_annotation == "":
            continue
        set_name = f"{set_name} {set_annotation}"
        set_item_indexs = sorted(sets[set_index])
        _set = {
            "index": set_index,
            "name": set_name,
            "item_indexs": set_item_indexs,
            "items": [],
        }
        GAME_ITEM_SET_INDEXS.append(_set)


if "collectstatic" not in sys.argv:
    load_map()
    load_skill()
    load_item()
    load_set()
